# -*- coding: utf-8 -*-
"""K22SK_adult_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x0XxWPWv2ZHD1emQ8FpHoMO0vvBeYGNU
"""

import pandas as pd

dataset=pd.read_csv('/content/adult.csv', header=None, na_values=' ?')

dataset.shape

dataset.head()

dataset.columns=['age', 'workclass','wgt', 'edu','edu_num', 'marital_status',
                 'occ', 'relation','race', 'sex', 'gain','loss', 'hpw', 'country', 'income']

dataset.head()

dataset.isnull().sum()

from sklearn.impute import SimpleImputer
si=SimpleImputer(strategy='most_frequent')
dataset1=si.fit_transform(dataset)
print(pd.DataFrame(dataset1).isnull().sum())

dataset1=pd.DataFrame(dataset1)
dataset1.columns=['age', 'workclass','wgt', 'edu','edu_num', 'marital_status',
                 'occ', 'relation','race', 'sex', 'gain','loss', 'hpw', 'country', 'income']
print(dataset1.head())

cols=['workclass','edu','marital_status','occ', 'relation', 'race', 'sex','country','income']
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
for i in cols:
  dataset1[i]=le.fit_transform(dataset1[i])
print(dataset1.head())

target=dataset1['income']
input=dataset1.drop(columns=['income'])
input.shape

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(input, target, test_size=0.25)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
xtrain_sc=sc.fit_transform(x_train)
xtest_sc=sc.transform(x_test)

y_train.unique()

(y_train==0).sum()

(y_train==1).sum()

y_train.shape

from sklearn.linear_model import Perceptron
p=Perceptron()
p.fit(xtrain_sc, y_train)

p_train_results=p.predict(xtrain_sc)
p_test_results=p.predict(xtest_sc)

from sklearn.metrics import accuracy_score
print("Training Accuracy:", accuracy_score(p_train_results, y_train))
print("Testing Accuracy:", accuracy_score(p_test_results, y_test))

from sklearn.metrics import confusion_matrix
print("confusion matrix:")
print(confusion_matrix(p_train_results, y_train))

print(confusion_matrix(p_test_results, y_test))

from sklearn.metrics import precision_score, recall_score, f1_score
print("Precision:", precision_score(p_train_results, y_train))
print("Recall:", recall_score(p_train_results, y_train))
print("F1 Score:", f1_score(p_train_results, y_train))

from sklearn.model_selection import GridSearchCV

params=[{'penalty':['l1', 'l2', 'elasticnet']}, {'alpha':[0.001, 0.01, 0.1, 1]},
        {'eta0':[0.001, 0.01, 0.2, 0.5, 0.8]}]

gs=GridSearchCV(estimator=Perceptron(), param_grid=params)

gs.fit(xtrain_sc, y_train)

gs.best_score_

gs.best_params_

from sklearn.linear_model import LogisticRegression

lr=LogisticRegression()

lr.fit(xtrain_sc, y_train)

lr_train_results=lr.predict(xtrain_sc)
lr_test_results=lr.predict(xtest_sc)
print("Training Accuracy:", accuracy_score(lr_train_results, y_train))
print("Testing Accuracy:", accuracy_score(lr_test_results, y_test))

from sklearn.svm import SVC
svc=SVC()

svc.fit(xtrain_sc, y_train)

svc_train_results=svc.predict(xtrain_sc)
svc_test_results=svc.predict(xtest_sc)
print("Training Accuracy:", accuracy_score(svc_train_results, y_train))
print("Testing Accuracy:", accuracy_score(svc_test_results, y_test))

